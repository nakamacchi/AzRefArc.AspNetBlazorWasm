
<div class="table-responsive">
    <table class="table table-condensed table-striped table-hover">
        <thead>
            <tr>
                <th><nav class="nav nav-item" @onclick='() => SortData("AuthorId")'>著者ID</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("AuthorName")'>著者名</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("Phone")'>電話番号</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("State")'>州</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("Contract")'>契約有無</nav></th>
            </tr>
        </thead>
        <tbody>
            @if (Authors != null) foreach (var a in Authors)
                {
                    <tr>
                        <td>@a.AuthorId</td>
                        <td>@a.AuthorName</td>
                        <td>@a.Phone</td>
                        <td>@a.State</td>
                        <td>@if (a.Contract)
                            {
                                <input type="checkbox" disabled checked /> <span>契約あり</span>
                            }
                            else
                            {
                                <input type="checkbox" disabled /> <span>契約なし</span>

                            }
                        </td>
                    </tr>
                }
        </tbody>
    </table>
</div>

@code {
    // 外部パラメータ
    [Parameter]
    public List<AuthorOverview> Authors { get; set; } = new List<AuthorOverview>();

    private string currentSortKey = "";
    private bool isCurrentSortDecending = false; 

    protected void SortData(string sortKey)
    {
        if (Authors != null)
        {
            Func<AuthorOverview, string> keySelector = null;
            if (sortKey == "AuthorId") keySelector = a => a.AuthorId;
            if (sortKey == "AuthorName") keySelector = a => a.AuthorName;
            if (sortKey == "Phone") keySelector = a => a.AuthorName;
            if (sortKey == "State") keySelector = a => a.AuthorName;
            if (sortKey == "Contract") keySelector = a => a.Contract.ToString();

            if (keySelector != null)
            {
                if (currentSortKey == sortKey && isCurrentSortDecending == false)
                {
                    Authors = Authors.OrderByDescending(keySelector).ToList();
                    isCurrentSortDecending = true;
                }
                else
                {
                    Authors = Authors.OrderBy(keySelector).ToList();
                    currentSortKey = sortKey;
                    isCurrentSortDecending = false;
                }
            }
        }
    }
}
