@page "/BizGroupA/ShowAuthorsByState/FilterByStateWithSort"

<PageTitle>州による著者一覧表示</PageTitle>

<h3>州による著者一覧表示</h3>
<h5>州を指定してください。</h5>

<select @bind="selectedKey" class="form-select-sm">
    @if (states != null) foreach (var item in states)
    {
        <option value="@item.Key">@item.Value</option>
    }
</select>

<input type="button" @onclick="GetData" class="btn btn-primary" value="データ取得" />

<hr />

<div class="table-responsive">
    <table class="table table-condensed table-striped table-hover">
        <thead>
            <tr>
                <th><nav class="nav nav-item" @onclick='() => SortData("AuthorId")'>著者ID</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("AuthorName")'>著者名</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("Phone")'>電話番号</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("State")'>州</nav></th>
                <th><nav class="nav nav-item" @onclick='() => SortData("Contract")'>契約有無</nav></th>
            </tr>
        </thead>
        <tbody>
            @if (authors != null) foreach (var a in authors)
                {
                    <tr>
                        <td>@a.AuthorId</td>
                        <td>@a.AuthorName</td>
                        <td>@a.Phone</td>
                        <td>@a.State</td>
                        <td>@if (a.Contract)
                            {
                                <input type="checkbox" disabled checked /> <span>契約あり</span>
                            }
                            else
                            {
                                <input type="checkbox" disabled /> <span>契約なし</span>

                            }
                        </td>
                    </tr>
                }
        </tbody>
    </table>
</div>

@code {
    // 外部パラメータ

    // ビューモデル
    string selectedKey = "";
    SortedDictionary<string, string> states = new SortedDictionary<string, string>();
    private List<AuthorOverview> authors = new List<AuthorOverview>();

    // アプリケーションサービス
    [Inject] 
    public HttpClient httpClient { get; set; }

    // イベントハンドラ(アプリケーション処理)
    protected override async Task OnInitializedAsync()
    {
        states = await httpClient.GetFromJsonAsync<SortedDictionary<string, string>>("/BizGroupA/ShowAuthorsByState/FilterByState/GetAllStates");
        selectedKey = states.First().Key;
    }

    protected async Task GetData()
    {
        HttpResponseMessage response = await httpClient.PostAsJsonAsync(
            "/BizGroupA/ShowAuthorsByState/FilterByState/GetAuthorsByState", 
            selectedKey);
        response.EnsureSuccessStatusCode();
        authors = await response.Content.ReadFromJsonAsync<List<AuthorOverview>>();
    }

    private string currentSortKey = "";
    private bool isCurrentSortDecending = false; 

    protected void SortData(string sortKey)
    {
        if (authors != null)
        {
            Func<AuthorOverview, string> keySelector = null;
            if (sortKey == "AuthorId") keySelector = a => a.AuthorId;
            if (sortKey == "AuthorName") keySelector = a => a.AuthorName;
            if (sortKey == "Phone") keySelector = a => a.AuthorName;
            if (sortKey == "State") keySelector = a => a.AuthorName;
            if (sortKey == "Contract") keySelector = a => a.Contract.ToString();

            if (keySelector != null)
            {
                if (currentSortKey == sortKey && isCurrentSortDecending == false)
                {
                    authors = authors.OrderByDescending(keySelector).ToList();
                    isCurrentSortDecending = true;
                }
                else
                {
                    authors = authors.OrderBy(keySelector).ToList();
                    currentSortKey = sortKey;
                    isCurrentSortDecending = false;
                }
            }
        }
    }
}
