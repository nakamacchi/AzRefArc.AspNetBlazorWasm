
■ 未処理例外に関する設計方針

基本的な考え方として。。
・未処理例外の発生時は「何が起こっているのかわからない」ので、原則としてアプリの継続を「してはならない」（＝アプリはリロード（再起動）させる）
・しかし、デバッグや障害対応のために例外情報をロギングしておいたり、ユーザへ例外発生を通知したりする必要はある

通信例外に対する考え方として。。
・httpClient のように「環境棋院で割と発生しやすい例外」については、最初から自動リトライ処理を組んだり、通信例外を捕捉する必要がある。
　自動リトライは共通処理のため、HttpClientFactory + Polly により実装する。
　通信が不安定な環境で利用されるアプリの場合には、アプリ UI レベルからの設計上の考慮が必要。（＝業務要件として通信失敗を加味しておく必要がある）
　通信失敗時の挙動はページごとに実装が変わるため、集約例外ハンドリングでの処理はしない。（個々のページに実装する）
　逆に、通信が安定している環境（イントラネットなど）であれば、通信失敗＝未処理例外として扱えばよい。
→ Program.cs に実装

① 開発環境の場合
ブラウザコンソールを開かずにその場で確認できたほうがラク。
このため、MainLayout.razor において <ErrorBoundary> を使って未処理例外を捕捉し、その場で表示する。
→ MainLayout.razor に実装

② 運用環境の場合
操作を継続させたくないため、操作を抑止しつつリロードを促すようなエラー画面を表示する。
未処理例外はブラウザコンソールに表示し、それ以上は特に何もしない
→ wwwroot/intex.html と wwwroot/css/app.cs に実装
